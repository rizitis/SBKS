#!/bin/bash

# Slackware bash script named SBKS-1.0 (Slack-Build-Kernel-Script)
# For Slackware and Slackware based distros.
# Anagnostakis Ioannis Greece 20/12/2022 rizitis@gmail.com
#   
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

if [ $EUID != 0 ]; then
    sudo "$0" "$@"
    exit $?
fi

set -x
# next 3 lines need edit every time you update/rebuild a new linux kernel
# kernel.org branch url and target files
KERNEL_URL=https://cdn.kernel.org/pub/linux/kernel/v6.x
KERNEL_VERSION=6.0.14
VERSION2=6.0.14

# Normal wont need edit next lines exept if you want to use "make menuconfig" 
KERNEL_TAR=linux-$KERNEL_VERSION.tar.xz
KERNEL_SIGN=linux-$KERNEL_VERSION.tar.sign
PRGNAM=linux
GPG=gpg2
WGET=wget
JOBS=${JOBS:-" -j$(expr $(getconf _NPROCESSORS_ONLN) \* 2 ) "}

# just in case...
if [ "$EUID" -ne 0 ];then
    echo "Please run this script as root"
    exit 1
fi

# Check if BOTH kernel version AND signature file exist
$WGET -c --spider $KERNEL_URL/linux-$KERNEL_VERSION.tar.{sign,xz}
if [ $? ]
then
# Download kernel AND signature
  $WGET -c $KERNEL_URL/linux-$KERNEL_VERSION.tar.{sign,xz}
fi

# Using GnuPG to verify kernel signatures
# Not working with all kernels every time,sorry , thats why set -e starting after this step.
unxz linux-$KERNEL_VERSION.tar.xz
$GPG --verify linux-$KERNEL_VERSION.tar.sign
xz -cd $KERNEL_VERSION.tar.xz | gpg2 --verify linux-$KERNEL_VERSION.tar.sign -
echo "---------------CHECK IF KEYS ARE THE SAME. IF YES hit 'y' ---"
echo "################ IF ARE NOT THE SAME hit 'n' ###############"
while true; do

read -p "Do you want to proceed? (y/n) " yn

case $yn in 
	[yY] ) echo ok, we will proceed;
		break;;
	[nN] ) echo exiting...;
		exit;;
	* ) echo invalid response;;
esac

done

echo doing stuff...

# «κάλλιο γαϊδουρόδενε, παρά γαϊδουρογύρευε» <--Ancient Greek adage from my Grand, grand, grand ...father. The founder of "set -e" 3679 BC
set -e

# script check if Grub or elilo are installed to your system. 
if [ -f /boot/efi/EFI/Slackware/elilo.conf ] ; then
  echo -e "\e[1;36m ### ELILO Found, using that...\e[0m"
 elif [ -f /boot/grub/grub.cfg ] ; then
  echo -e "\e[1;36m ### Grub Found, using that...\e[0m"
 else
  echo "ELILO or Grub not found!"
  echo "Assuming rEFInd, or something else, if yes then run manually update your bootloader before rebooting!"
  echo "If you are not sure then stop kenrel build now"
fi

while true; do

read -p "Do you want to proceed? (y/n) " yn

case $yn in 
	[yY] ) echo ok, we will proceed;
		break;;
	[nN] ) echo exiting...;
		exit;;
	* ) echo invalid response;;
esac

done

echo doing stuff...

# create a direcory, put kernel tarbal there for the rest of the work
mkdir -p kernel-$KERNEL_VERSION
cp $PRGNAM-$KERNEL_VERSION.tar kernel-$KERNEL_VERSION/
cd kernel-$KERNEL_VERSION/
echo "untar Linux-kernel "
sleep 3
tar xvpf $PRGNAM-$KERNEL_VERSION.tar
echo "cd to Linux-kernel package and make oldconfig"
# My old .config I use has commended
# CONFIG_SYSTEM_TRUSTED_KEYS
# CONFIG_SYSTEM_TRUSTED_KEYRING
sleep 3
cd $PRGNAM-$KERNEL_VERSION/
zcat /proc/config.gz > .config  
make oldconfig
# uncomend next line if you want make menuconfig 
# make menuconfig
echo 'Lets Burn Out CPU!!!!! AND BUILD THE UNIVERSE'
sleep 3
make $JOBS
make modules_install
echo "finish build and install"
sleep 2
# fix vnlinuz and System.map. Some things are optional but just in case...not hurt.
cp arch/x86_64/boot/bzImage /boot/vmlinuz-$VERSION2
cp System.map /boot/System.map-$VERSION2

cd /boot
rm System.map
ln -s System.map-$VERSION2 System.map

# make initrd
/usr/share/mkinitrd/mkinitrd_command_generator.sh -k $VERSION2 > mymkinitrd.sh
sh mymkinitrd.sh

# update-bootloader
if [ -f /boot/efi/EFI/Slackware/elilo.conf ] ; then
  echo -e "\e[1;36m ### ELILO Found, using that...\e[0m"
  eliloconfig
elif [ -f /boot/grub/grub.cfg ] ; then
  echo -e "\e[1;36m ### Grub Found, using that...\e[0m"
  grub-mkconfig -o /boot/grub/grub.cfg
else
  echo "ELILO or Grub not found!"
  echo 'Assuming rEFInd, or something else? Dont forget to run manually update your bootloader before rebooting!'
fi
sleep 3
#just in case... run second time update bootloader
if [ -f /boot/efi/EFI/Slackware/elilo.conf ] ; then
  echo -e "\e[1;36m ### ELILO Found, using that...\e[0m"
  eliloconfig
elif [ -f /boot/grub/grub.cfg ] ; then
  echo -e "\e[1;36m ### Grub Found, using that...\e[0m"
  grub-mkconfig -o /boot/grub/grub.cfg
else
  echo "ELILO or Grub not found!"
  echo "Assuming rEFInd, or something else, then run manually update your bootloader before rebooting!"
fi

exit 0
